pipeline {
    agent any

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'test', 'prod'], description: 'Select the deployment environment')
    }

    environment {
        DOCKER_REGISTRY = 'xindyx'
        KUBE_CONFIG = credentials('kubeconfig')
        HELM_REPO = 'https://charts.bitnami.com/bitnami'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build and Test') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def services = [
                        'accounts-service',
                        'cash-service',
                        'exchange-service',
                        'exchange-generator-service',
                        'notifications-service',
                        'transfer-service',
                        'blocker-service',
                        'front-ui'
                    ]

                    services.each { service ->
                        sh """
                            docker build -t ${DOCKER_REGISTRY}/${service}:${BUILD_NUMBER} -t ${DOCKER_REGISTRY}/${service}:latest ./${service}
                            docker push ${DOCKER_REGISTRY}/${service}:${BUILD_NUMBER}
                            docker push ${DOCKER_REGISTRY}/${service}:latest
                        """
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh """
                        chmod +x scripts/deploy-kafka.sh
                        ./scripts/deploy-kafka.sh ${ENVIRONMENT} ${BUILD_NUMBER}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
} 